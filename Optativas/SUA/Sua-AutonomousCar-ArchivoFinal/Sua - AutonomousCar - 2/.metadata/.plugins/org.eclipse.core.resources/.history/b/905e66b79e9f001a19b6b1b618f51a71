package autonomouscar.roadtype.monitor;

import java.util.Dictionary;

import org.osgi.framework.BundleContext;
import org.osgi.framework.ServiceEvent;
import org.osgi.framework.ServiceListener;
import org.osgi.framework.ServiceReference;
import sua.autonomouscar.driving.interfaces.IDrivingService;
import sua.autonomouscar.driving.interfaces.IL0_ManualDriving;
import sua.autonomouscar.infrastructure.OSGiUtils;
import sua.autonomouscar.infrastructure.Thing;
import sua.autonomouscar.infrastructure.driving.DrivingService;
import sua.autonomouscar.infrastructure.driving.L2_DrivingService;
import sua.autonomouscar.interfaces.EDrivingMode;
import sua.autonomouscar.interfaces.ERoadStatus;
import sua.autonomouscar.interfaces.ERoadType;
import sua.autonomouscar.simulation.console.commands.L0_ManualDrivingConfigurator;
import sua.autonomouscar.simulation.console.commands.L1_AssistedDrivingConfigurator;
import sua.autonomouscar.simulation.console.commands.L2_AdaptiveCruiseControlConfigurator;
import sua.autonomouscar.simulation.console.commands.L2_LaneKeepingAssistConfigurator;
import sua.autonomouscar.simulation.console.commands.L3_CityChaufferConfigurator;
import sua.autonomouscar.simulation.console.commands.L3_HighwayChaufferConfigurator;
import sua.autonomouscar.simulation.console.commands.L3_TrafficJamChaufferConfigurator;

public class RoadTypeMonitor implements ServiceListener  {
	
	private BundleContext context;
	private IDrivingService driving;
	private ERoadType roadTypeAnterior = null;
	private ERoadStatus roadStatusAnterior = null;
	public RoadTypeMonitor(BundleContext bundleContext) {
		this.context = bundleContext;		
	}

	@Override
	public void serviceChanged(ServiceEvent event) {
		// TODO Auto-generated method stub
		ServiceReference ref = event.getServiceReference();
		
		if(event.getType() == ServiceEvent.MODIFIED) 
		{
			
			Dictionary<String,Object> properties = ref.getProperties();			
			ERoadType roadType = (ERoadType) properties.get("road-type");
			ERoadStatus roadStatus = (ERoadStatus) properties.get("road-status");
			this.driving = OSGiUtils.getService(context, IDrivingService.class, String.format("(%s=true)", DrivingService.ACTIVE));
			this.driving = OSGiUtils.getService(context, IDrivingService.class, String.format("(%s=true)", DrivingService.ACTIVE));
			
			if (driving == null) 
			{
				System.out.println("DrivingService is not found");
			}
			else 
			{
				String mode = driving.getId();
				System.out.println(mode.toString());	
				System.out.println(roadType.toString());
				System.out.println(roadStatus.toString());

				if (IsL3DrivingMode(mode) && (roadType == ERoadType.OFF_ROAD || roadType == ERoadType.STD_ROAD)) {
					ADS_L3_1();
					return;
				}
				else if(mode == EDrivingMode.L3_HC && roadType == ERoadType.HIGHWAY && roadStatusAnterior == ERoadStatus.FLUID && (roadStatus == ERoadStatus.COLLAPSED 
						|| roadStatus == ERoadStatus.JAM)){
					ADS_L3_2();
					return;
				}
				else if(mode == EDrivingMode.L3_HC && roadType == ERoadType.CITY && roadStatus == ERoadStatus.FLUID ){
					System.out.println("----------------IF ADS_L3-3");
					ADS_L3_3();
					return;
				}
				SetEstadosAnteriores(roadType, roadStatus);
			}
		}
	}
	
	public void ADS_L3_1() {
		System.out.println("-----------------Activando ADS_L3_1;");
		try {
			L2_AdaptiveCruiseControlConfigurator.configure(context);
			L2_AdaptiveCruiseControlConfigurator.start(context);
		}
		catch(Exception ex){
			L1_AssistedDrivingConfigurator.configure(context);
			L1_AssistedDrivingConfigurator.start(context);
		}
		
	}
	
	public void ADS_L3_2() {
		System.out.println("-----------------Activando ADS_L3-2");
		L3_TrafficJamChaufferConfigurator.configure(context);
		L3_TrafficJamChaufferConfigurator.start(context);
	}
	
	public void ADS_L3_3() {
		System.out.println("-----------------Activando ADS_L3-3");
		L3_CityChaufferConfigurator.configure(context);
		L3_CityChaufferConfigurator.start(context);
	}
	
	
	public boolean IsL3DrivingMode(String mode) {
		return mode == EDrivingMode.L3_CC || mode == EDrivingMode.L3_HC || mode == EDrivingMode.L3_TJC;
	}
	
	private void SetEstadosAnteriores(ERoadType roadType, ERoadStatus roadStatus) 
	{
		roadTypeAnterior = roadType;
		roadStatusAnterior = roadStatus;
	}

}
